#pragma once

#include "SDL3/SDL_stdinc.h"

namespace 引擎::核心 {

/*
 * 管理游戏循环时间,计算帧间时间差(delta time)。
 *
 * 使用SDL的高精度性能计数器。确保测量准确性。
 * 提供时间缩放相关方法。
 */
class 时间 final { // final 防止继承
private:
  Uint64 _上帧时间点 = 0;     // 上帧时间点(计算帧间时间差用)
  Uint64 _此帧开始时间点 = 0; // 当前帧开始时间点(帧率限制用)
  double _帧间时长 = 0.0;     // 未缩放的帧间时长
  double _时间缩放 = 1.0;     // 时间缩放 0.5 表示 1 秒钟 游戏时间 0.5 秒钟

  // 帧率限制
  int _目标帧率 = 0;          // 0 表示无限制 fps
  double _目标每帧时长 = 0.0; // 秒

public:
  时间();
  ~时间() = default;

  // 删除 复制、赋值、移动运算符
  时间(const 时间 &) = delete;
  时间 &operator=(const 时间 &) = delete;
  时间(时间 &&) = delete;
  时间 &operator=(时间 &&) = delete;

  // 每帧开始时调用，更新内部时间状态并计算帧间时间差
  void 更新();
  // 设置目标帧率, 0 表示无限制,负值视为 0
  void 设置目标帧率(int fps);
  // 获取当前设置的目标帧率，0 表示无限制
  int 获取目标帧率() const;
  // 获取缩放后的帧间时长 (秒)
  double 获取帧间时长() const;
  // 获取未缩放的帧间时长 (秒)
  double 获取无缩放帧间时长() const;

  /*
   *设置时间缩放因子
   * 缩放  1.0 表示正常速度，<1.0 表示慢放，>1.0 表示快进。
   */
  void 设置时间缩放(double 缩放);
  // 获取当前时间缩放
  double 获取时间缩放() const;

private:
  /*
   * 限制帧率，更新()中调用。
   * 如果设置目标帧率>0且当前执行帧小于目标帧时间，则调用SDL_DelayNS()等待剩余时长。
   * 当前帧已执行时长 = 当前帧结束时间 - 当前帧开始时间
   * 当前帧已经经过了的时间 (秒)
   */
  void 限制帧率(float 当前帧已执行时长);
};
} // namespace 引擎::核心