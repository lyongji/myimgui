#include "时间.hpp"
#include "SDL3/SDL_stdinc.h"
#include "SDL3/SDL_timer.h"
#include "日志.hpp"

namespace 引擎 ::核心 {
时间::时间() {
  // 初始化为当前时间点,防止第一帧时间差过大
  _上帧时间点 = SDL_GetTicksNS();
  _此帧开始时间点 = _上帧时间点;
  记录跟踪("时间初始化，上帧时间点：{}", _上帧时间点);
}

void 时间::更新() {
  _此帧开始时间点 = SDL_GetTicksNS(); // 记录进入此帧的时间点
  auto 耗时 = (_此帧开始时间点 - _上帧时间点) / 1.0e9;
  // 如果设置了目标帧率,则进行帧率控制;否则 _帧间时长 = 耗时
  if (_目标每帧时长 > 0.0) {
    限制帧率(耗时);
  } else {
    _帧间时长 = 耗时;
  }
  // 记录离开 更新() 的时间点
  _上帧时间点 = SDL_GetTicksNS(); // 获取当前时间
  // 记录信息("帧间时长：{:.6f}", _帧间时长);
}
void 时间::设置时间缩放(double 缩放) {
  if (缩放 <= 0.0) {
    记录错误("时间缩放必须≥0,限制到0");
    _时间缩放 = 0.0;
  }
  _时间缩放 = 缩放;
}
double 时间::获取时间缩放() const { return _时间缩放; }

double 时间::获取帧间时长() const { return _帧间时长 * _时间缩放; }
double 时间::获取无缩放帧间时长() const { return _帧间时长; }

void 时间::设置目标帧率(int fps) {
  if (fps < 0) {
    记录错误("目标帧率不能小于0;默认设置为0(无限制)");
    _目标帧率 = 0;
  } else {
    _目标帧率 = fps;
  }

  if (fps > 0) {
    _目标每帧时长 = 1.0 / static_cast<double>(_目标帧率);
    记录信息("目标帧率设置为：{} 每帧时长：{:.6f}", _目标帧率, _目标每帧时长);
  } else {
    _目标每帧时长 = 0.0;
    记录信息("目标帧率设置为：无限制");
  }
}

int 时间::获取目标帧率() const { return _目标帧率; }

void 时间::限制帧率(float 当前帧已执行时长) {
  // 如果当前帧耗时小于目标帧间隔,则等待剩余时间
  if (当前帧已执行时长 < _目标每帧时长) {
    auto 剩余等待时长 = _目标每帧时长 - 当前帧已执行时长;
    auto 剩余等待时长NS = static_cast<Uint64>(剩余等待时长 * 1.0e9);
    SDL_DelayNS(剩余等待时长NS);
    _帧间时长 = static_cast<double>(SDL_GetTicksNS() - _上帧时间点) / 1.0e9;
  }
}

} // namespace 引擎::核心